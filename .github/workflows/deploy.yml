name: Deploy to Production

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PHP_VERSION: '8.4'
  NODE_VERSION: '20'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: markt_test
          MYSQL_ROOT_PASSWORD: password
          MYSQL_USER: markt
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysql, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install NPM dependencies
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: Copy .env
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Configure database
        run: |
          sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
          sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env
          sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
          sed -i 's/DB_DATABASE=.*/DB_DATABASE=markt_test/' .env
          sed -i 's/DB_USERNAME=.*/DB_USERNAME=markt/' .env
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=password/' .env

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run tests
        run: php artisan test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event.inputs.environment == 'production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Für Git-Tags

      - name: Get version
        id: version
        run: |
          if [ -n "$(git tag --points-at HEAD)" ]; then
            VERSION=$(git tag --points-at HEAD)
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysql, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Composer dependencies (production)
        run: |
          composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader
          composer dump-autoload --optimize

      - name: Install NPM dependencies
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: Create VERSION file
        run: echo "${{ steps.version.outputs.VERSION }}" > VERSION

      - name: Create deployment archive
        run: |
          tar -czf deploy.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='tests' \
            --exclude='storage/app/public/*' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/testing/*' \
            --exclude='storage/framework/views/*' \
            --exclude='.env' \
            --exclude='.env.example' \
            --exclude='*.log' \
            --exclude='.editorconfig' \
            --exclude='.gitattributes' \
            --exclude='.gitignore' \
            --exclude='phpunit.xml' \
            --exclude='README.md' \
            --exclude='deploy.sh' \
            --exclude='remote-setup.sh' \
            .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: deploy-archive
          path: deploy.tar.gz
          retention-days: 5

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.APP_URL }}
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: deploy-archive

      - name: Deploy to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          source: "deploy.tar.gz"
          target: "/tmp"

      - name: Execute deployment on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            # Variablen
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
            BACKUP_PATH="${{ secrets.BACKUP_PATH || '/home/backup/markt' }}"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            PHP_BIN="${{ secrets.PHP_BIN || '/usr/bin/php84' }}"
            
            # Backup erstellen
            if [ -d "$DEPLOY_PATH" ]; then
              echo "Creating backup..."
              mkdir -p "$BACKUP_PATH"
              tar -czf "$BACKUP_PATH/backup_$TIMESTAMP.tar.gz" -C "$DEPLOY_PATH" .
              
              # Alte Backups löschen (behalte nur die letzten 5)
              cd "$BACKUP_PATH"
              ls -t backup_*.tar.gz | tail -n +6 | xargs -r rm
            fi
            
            # Maintenance Mode aktivieren
            cd "$DEPLOY_PATH"
            $PHP_BIN artisan down --retry=60
            
            # Deployment entpacken
            echo "Extracting deployment archive..."
            tar -xzf /tmp/deploy.tar.gz -C "$DEPLOY_PATH"
            rm /tmp/deploy.tar.gz
            
            # Storage-Verzeichnisse sicherstellen
            mkdir -p storage/app/public
            mkdir -p storage/framework/cache
            mkdir -p storage/framework/sessions
            mkdir -p storage/framework/views
            mkdir -p storage/logs
            mkdir -p bootstrap/cache
            
            # Berechtigungen setzen
            chown -R www-data:www-data storage bootstrap/cache
            chmod -R 775 storage bootstrap/cache
            
            # Laravel Optimierungen
            echo "Running Laravel optimizations..."
            $PHP_BIN artisan config:cache
            $PHP_BIN artisan route:cache
            $PHP_BIN artisan view:cache
            $PHP_BIN artisan filament:cache-components
            
            # Migrationen ausführen
            echo "Running migrations..."
            $PHP_BIN artisan migrate --force
            
            # Queue neu starten
            $PHP_BIN artisan queue:restart
            
            # Maintenance Mode deaktivieren
            $PHP_BIN artisan up
            
            echo "Deployment completed successfully!"

      - name: Health check
        run: |
          echo "Waiting for application to be ready..."
          sleep 10
          
          # Health Check
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.APP_URL }})
          if [ $response -eq 200 ] || [ $response -eq 302 ]; then
            echo "✅ Application is healthy (HTTP $response)"
          else
            echo "❌ Application health check failed (HTTP $response)"
            exit 1
          fi

  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Send success notification
        if: success()
        run: |
          echo "✅ Deployment successful!"
          # Hier könntest du Slack, Discord, E-Mail etc. integrieren
          
      - name: Send failure notification
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # Hier könntest du Slack, Discord, E-Mail etc. integrieren